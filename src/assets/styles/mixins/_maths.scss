@use "sass:math";
@use "sass:list";

@function fact($n: 1) {
  $s: 1;
  @while $n > 1 {
    $s: $s * $n;
    $n: $n - 1;
  }
  @return $s;
}

@function exp($n: 0) {
  $s: 1;
  @for $i from 1 to $expFuncPrecisionIterations {
    $s: $s + math.div(math.pow($n, $i), fact($i));
  }
  @return $s;
}

@function lerp($start, $end, $n){
  @return (1 - $n) * $start + $n * $end;
}

@function mapRange($n: 0, $in_min: 0, $in_max: 0, $out_min: 0, $out_max: 0) {
  @return ($n - $in_min) * math.div(($out_max - $out_min), ($in_max - $in_min)) + $out_min;
}

@function gaussian($min: 0, $max: 0, $steps: 0) {
  
  $p: .4;
  $m: 0;
  $z: .3;
  
  $steps: $steps - 1;
  
  $results: ();
  
    @for $i from 0 through $steps {
      $lerp: math.div($i, $steps);
      $val: math.div(1,($p*math.sqrt(2*math.$pi)))*exp(math.div(-1,2)*math.pow(math.div($lerp - $m, $z), 2));
      @if $i < 0 {
        $val: -$val;
      }
      $val: lerp($min, $max, $val);
      $results: list.append($results, $val);
      
    }
    
    @return reverse($results);
  }
  
  @function linear($min: 0, $max: 0, $steps: 0) {
    $results: ();
  
    @for $i from 0 through $steps {
      $val: mapRange($i, 0, $steps, $min, $max);
      $results: list.append($results, $val);
    }

    @return $results;
  }